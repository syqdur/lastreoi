Prompt: Upload-integriertes Tagging-System implementieren
üéØ Aufgabe
Implementiere ein neues Tagging-System, das direkt in den Upload-Prozess integriert ist. Aktuell m√ºssen Nutzer erst Bilder hochladen, dann √∂ffnen und dann √ºber separate Buttons (+Mensch & GPS) taggen. Das neue System soll das Tagging bereits beim Upload erm√∂glichen.
üìã Anforderungen
Funktionale Anforderungen

Upload-Workflow: Nach Dateiauswahl √∂ffnet sich ein Tagging-Modal vor dem eigentlichen Upload
Personen-Tagging: Nutzer aus der Gallery-Teilnehmerliste ausw√§hlen und markieren
Standort-Tagging: GPS-Position automatisch erfassen oder manuell eingeben
Multi-File Support: Mehrere Dateien gleichzeitig mit individuellen Tags hochladen
Vorschau: Ausgew√§hlte Bilder/Videos vor Upload anzeigen
R√ºckw√§rtskompatibilit√§t: Bestehende Tagging-Funktionalit√§t beibehalten

Technische Anforderungen

React + TypeScript: Bestehende Codebase erweitern
Firebase Integration: Bestehende firebaseService Funktionen nutzen
Mobile-First: Touch-optimierte Bedienung
Performance: Keine Verz√∂gerung beim Upload-Prozess
Error Handling: Robuste Fehlerbehandlung

üîß Zu modifizierende Komponenten
1. UploadSection.tsx erweitern
typescript// Neue States hinzuf√ºgen:
const [showTaggingModal, setShowTaggingModal] = useState(false);
const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);
const [previewUrls, setPreviewUrls] = useState<string[]>([]);
const [galleryUsers, setGalleryUsers] = useState<GalleryUser[]>([]);

// handleFileChange modifizieren:
// - Statt direktem Upload ‚Üí Tagging-Modal √∂ffnen
// - Vorschau-URLs f√ºr gew√§hlte Dateien erstellen
// - Gallery-Users laden
2. Neue Komponente: UploadTaggingModal.tsx erstellen
typescriptinterface UploadTaggingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (files: FileList, fileTags: Record<string, MediaTag[]>) => Promise<void>;
  files: FileList | null;
  previewUrls: string[];
  galleryUsers: GalleryUser[];
  currentUser: string;
  currentDeviceId: string;
  isDarkMode: boolean;
  galleryId: string;
}

// Features implementieren:
// - Datei-Carousel f√ºr Multi-File Support
// - Personen-Auswahl mit Search-Funktion
// - GPS-Button f√ºr automatische Standorterkennung
// - Manuelle Standorteingabe mit Autocomplete
// - Tag-Preview f√ºr jede Datei
// - Bulk-Tagging Optionen
3. Upload-Handler erweitern
typescript// Neue Funktion f√ºr Upload mit Tags:
const onUploadWithTags = async (files: FileList, fileTags: Record<string, MediaTag[]>) => {
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    const tags = fileTags[file.name] || [];
    
    // Upload-Prozess mit integrierten Tags
    await uploadFileWithTags(file, tags);
  }
};
üé® UI/UX Spezifikationen
Modal-Layout
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ [‚Üê] Dateien markieren [2/3]      [‚úì]‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                     ‚îÇ
‚îÇ     [Bild/Video Vorschau]           ‚îÇ
‚îÇ     ‚óã ‚óè ‚óã  (Carousel Indicator)     ‚îÇ
‚îÇ                                     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üë• Personen markieren               ‚îÇ
‚îÇ [Search: "Name eingeben..."]        ‚îÇ
‚îÇ [Max] [Lisa] [Tom] [+3 weitere]     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìç Standort                         ‚îÇ
‚îÇ [üìç GPS verwenden] [üìù Eingeben]    ‚îÇ
‚îÇ üìç "Restaurant Sonne, M√ºnchen"      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ [√úberspringen] [Zur√ºck] [Hochladen] ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Mobile Optimierung

Touch-freundliche Buttons: Mindestens 44px H√∂he
Swipe-Navigation: Zwischen mehreren Dateien wechseln
Bottom Sheet Design: Modal von unten einfahren lassen
Haptic Feedback: Bei Interaktionen

üì± Workflow-Spezifikation
Upload-Prozess (neu)

Datei-Auswahl: Nutzer w√§hlt Foto/Video aus Gallery
Tagging-Modal: √ñffnet sich automatisch mit Vorschau
Personen taggen: Aus Teilnehmerliste ausw√§hlen (optional)
Standort hinzuf√ºgen: GPS oder manuell (optional)
Upload: Mit allen Tags in einem Schritt
Best√§tigung: Erfolg-Feedback mit Tag-√úbersicht

Multi-File Handling

Carousel-Navigation: Wischen zwischen Dateien
Bulk-Actions: "Gleiche Tags f√ºr alle" Option
Individual-Tags: Pro Datei separate Tags
Progress-Indicator: Upload-Fortschritt f√ºr jede Datei

üîó Integration mit bestehenden Services
Firebase Services nutzen
typescript// Bestehende Funktionen erweitern:
import { 
  addMediaTag, 
  addLocationTag, 
  getGalleryUsers,
  getCurrentLocation,
  searchLocations 
} from '../services/firebaseService';

// Neue Composite-Funktion:
const uploadWithTags = async (file: File, tags: MediaTag[]) => {
  const mediaItem = await uploadFile(file);
  
  for (const tag of tags) {
    if (tag.type === 'person') {
      await addMediaTag(mediaItem.id, tag.userName, tag.deviceId, currentUser, currentDeviceId);
    } else if (tag.type === 'location') {
      await addLocationTag(mediaItem.id, tag.locationData, currentUser, currentDeviceId);
    }
  }
  
  return mediaItem;
};
Bestehende Komponenten beibehalten

InstagramPost.tsx: Weiterhin nachtr√§gliches Tagging m√∂glich
MediaModal.tsx: Tag-Anzeige und -bearbeitung
MediaTagging.tsx: Als Fallback f√ºr nachtr√§gliche √Ñnderungen

üß™ Testing-Anforderungen
Unit Tests

Upload-Handler mit verschiedenen Datei-Typen
Tag-Validierung und -Speicherung
Error-Handling bei fehlgeschlagenen Uploads

Integration Tests

Vollst√§ndiger Upload-Workflow
Multi-File Tagging
GPS-Funktionalit√§t (mit Mock)

User Acceptance Tests

Mobile Bedienbarkeit
Performance bei gro√üen Dateien
Tagging-Genauigkeit

üöÄ Implementierungsreihenfolge
Phase 1: Core-Funktionalit√§t

UploadTaggingModal Basis-Komponente
Single-File Upload mit Personen-Tags
GPS-Integration
UploadSection Integration

Phase 2: Erweiterte Features

Multi-File Support
Standort-Suche mit Autocomplete
Bulk-Tagging Optionen
UI/UX Verfeinerungen

Phase 3: Optimierung

Performance-Optimierung
Offline-Funktionalit√§t
Advanced Error Handling
Analytics Integration

üìä Erfolgskriterien

+50% Tagging-Rate: Mehr Uploads mit Tags
-70% Zeit bis Tag: Schnellerer Tagging-Prozess
0 Breaking Changes: Vollst√§ndige R√ºckw√§rtskompatibilit√§t
<2s Modal-Load: Schnelle Anzeige nach Datei-Auswahl
Mobile-First: Perfekte Touch-Bedienung

üí° Besondere Hinweise

Bestehende Styles verweitern: Theme-System (hochzeit/geburtstag/urlaub/eigenes) beibehalten
Accessibility: ARIA-Labels und Keyboard-Navigation
Privacy: GPS-Berechtigung benutzerfreundlich abfragen
Fallbacks: Wenn Tagging fehlschl√§gt, trotzdem upload
Progressive Enhancement: Funktioniert auch ohne JavaScript